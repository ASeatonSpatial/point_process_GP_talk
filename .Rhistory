dfs1 <- data.frame(x = x.seq, y = sim1@data$variable1)
ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
# Simulate now from these
m10 <- RMexp(var=2, scale=sc10) + RMtrend(mean=0)
m4 <- RMexp(var=2, scale=sc4) + RMtrend(mean=0)
m1 <- RMexp(var=2, scale=sc1) + RMtrend(mean=0)
sim10 <- RFsimulate(m10, x=x.seq)
sim4 <- RFsimulate(m4, x=x.seq)
sim1 <- RFsimulate(m1, x=x.seq)
dfs10 <- data.frame(x = x.seq, y = sim10@data$variable1)
dfs4 <- data.frame(x = x.seq, y = sim4@data$variable1)
dfs1 <- data.frame(x = x.seq, y = sim1@data$variable1)
ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
# Simulate now from these
m10 <- RMexp(var=2, scale=sc10) + RMtrend(mean=0)
m4 <- RMexp(var=2, scale=sc4) + RMtrend(mean=0)
m1 <- RMexp(var=2, scale=sc1) + RMtrend(mean=0)
sim10 <- RFsimulate(m10, x=x.seq)
sim4 <- RFsimulate(m4, x=x.seq)
sim1 <- RFsimulate(m1, x=x.seq)
dfs10 <- data.frame(x = x.seq, y = sim10@data$variable1)
dfs4 <- data.frame(x = x.seq, y = sim4@data$variable1)
dfs1 <- data.frame(x = x.seq, y = sim1@data$variable1)
ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
# Simulate now from 3 different correlation ranges
m10 <- RMexp(var=2, scale=sc10) + RMtrend(mean=0)
m4 <- RMexp(var=2, scale=sc4) + RMtrend(mean=0)
m1 <- RMexp(var=2, scale=sc1) + RMtrend(mean=0)
sim10 <- RFsimulate(m10, x=x.seq)
sim4 <- RFsimulate(m4, x=x.seq)
sim1 <- RFsimulate(m1, x=x.seq)
dfs10 <- data.frame(x = x.seq, y = sim10@data$variable1)
dfs4 <- data.frame(x = x.seq, y = sim4@data$variable1)
dfs1 <- data.frame(x = x.seq, y = sim1@data$variable1)
ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
# Simulate now from 3 different correlation ranges
m10 <- RMexp(var=2, scale=sc10) + RMtrend(mean=0)
m4 <- RMexp(var=2, scale=sc4) + RMtrend(mean=0)
m1 <- RMexp(var=2, scale=sc1) + RMtrend(mean=0)
sim10 <- RFsimulate(m10, x=x.seq)
sim4 <- RFsimulate(m4, x=x.seq)
sim1 <- RFsimulate(m1, x=x.seq)
dfs10 <- data.frame(x = x.seq, y = sim10@data$variable1)
dfs4 <- data.frame(x = x.seq, y = sim4@data$variable1)
dfs1 <- data.frame(x = x.seq, y = sim1@data$variable1)
ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
# Simulate now from 3 different correlation ranges
m10 <- RMexp(var=2, scale=sc10) + RMtrend(mean=0)
m4 <- RMexp(var=2, scale=sc4) + RMtrend(mean=0)
m1 <- RMexp(var=2, scale=sc1) + RMtrend(mean=0)
sim10 <- RFsimulate(m10, x=x.seq)
sim4 <- RFsimulate(m4, x=x.seq)
sim1 <- RFsimulate(m1, x=x.seq)
dfs10 <- data.frame(x = x.seq, y = sim10@data$variable1)
dfs4 <- data.frame(x = x.seq, y = sim4@data$variable1)
dfs1 <- data.frame(x = x.seq, y = sim1@data$variable1)
ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
# Simulate now from 3 different correlation ranges
m10 <- RMexp(var=2, scale=sc10) + RMtrend(mean=0)
m4 <- RMexp(var=2, scale=sc4) + RMtrend(mean=0)
m1 <- RMexp(var=2, scale=sc1) + RMtrend(mean=0)
set.seed(123)
sim10 <- RFsimulate(m10, x=x.seq)
sim4 <- RFsimulate(m4, x=x.seq)
sim1 <- RFsimulate(m1, x=x.seq)
dfs10 <- data.frame(x = x.seq, y = sim10@data$variable1)
dfs4 <- data.frame(x = x.seq, y = sim4@data$variable1)
dfs1 <- data.frame(x = x.seq, y = sim1@data$variable1)
ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
p1 <- ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
p2 <- ggplot() +
geom_line(data = df10, aes(x=x, y=cexp, colour = "black")) +
geom_line(data = df4, aes(x=x, y=cexp, colour = "orange")) +
geom_line(data = df1, aes(x=x, y=cexp, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 4", "scale = 1")) +
xlab("r") +
ylab(expression(paste(kappa, "(r)")))
p1 p2
p1
p2
library(inlabru)
p1 <- ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("s") +
ylab("f")
p2 <- ggplot() +
geom_line(data = df10, aes(x=x, y=cexp, colour = "black")) +
geom_line(data = df4, aes(x=x, y=cexp, colour = "orange")) +
geom_line(data = df1, aes(x=x, y=cexp, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 4", "scale = 1")) +
xlab("r") +
ylab(expression(paste(kappa, "(r)")))
library(inlabru)
multiplot(p1,p2)
```
p1 <- ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
xlab("s") +
ylab("f")
p2 <- ggplot() +
geom_line(data = df10, aes(x=x, y=cexp, colour = "black")) +
geom_line(data = df4, aes(x=x, y=cexp, colour = "orange")) +
geom_line(data = df1, aes(x=x, y=cexp, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 4", "scale = 1")) +
xlab("r") +
ylab(expression(paste(kappa, "(r)")))
library(inlabru)
multiplot(p2, p1)
```
p1 <- ggplot() +
geom_line(data = dfs10, aes(x=x, y=y, colour = "black")) +
geom_line(data = dfs4, aes(x=x, y=y, colour = "orange")) +
geom_line(data = dfs1, aes(x=x, y=y, colour = "blue")) +
xlab("s") +
ylab("f")
p2 <- ggplot() +
geom_line(data = df10, aes(x=x, y=cexp, colour = "black")) +
geom_line(data = df4, aes(x=x, y=cexp, colour = "orange")) +
geom_line(data = df1, aes(x=x, y=cexp, colour = "blue")) +
scale_colour_manual(values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 4", "scale = 1")) +
xlab("r") +
ylab(expression(paste(kappa, "(r)")))
#
# library(inlabru)
# multiplot(p2, p1)
```
p1
p2
inlabru::multiplot(p2,p1)
inlabru::multiplot(p2,p1, cols = 2)
inlabru::multiplot(p2,p1)
# Exp correlation fn
cexp <- function(r, scale) exp(-1/(2*scale)*r)
sc10 <- 10
df10 <- data.frame(x = x.seq, cexp = cexp(x.seq, sc10))
sc4 <- 4
df4 <- data.frame(x = x.seq, cexp = cexp(x.seq, sc4))
sc1 <- 1
df1 <- data.frame(x = x.seq, cexp = cexp(x.seq, sc1))
p1 <- ggplot() +
geom_line(data = df10, aes(x=x, y=cexp, colour = "black")) +
geom_line(data = df4, aes(x=x, y=cexp, colour = "red")) +
geom_line(data = df1, aes(x=x, y=cexp, colour = "blue")) +
scale_colour_manual(name = "",
values = c("black", "red", "blue"),
labels = c("scale = 10", "scale = 1", "scale = 4")) +
xlab("r") +
ylab(expression(paste(kappa, "(r)"))) +
ggtitle("Exponential covariance function")
x <- seq(0, 1, len=100)
model <- RMwhittle(nu=1, Aniso=matrix(nc=2, c(1.5, 3, -3, 4)))
plot(model, dim=2, xlim=c(-1,1))
z <- RFsimulate(model=model, x, x)
plot(z)
RFoptions(seed=0)
x <- seq(0, 1, len=100)
model <- RMwhittle(nu=1, Aniso=matrix(nc=2, c(1.5, 3, -3, 4)))
plot(model, dim=2, xlim=c(-1,1))
z <- RFsimulate(model=model, x, x)
plot(z)
RFoptions(seed=NA)
RFoptions(seed=0)
x <- seq(0, 1, len=100)
model <- RMwhittle(nu=1, Aniso=matrix(nc=2, c(1.5, 3, -3, 4)))
z <- RFsimulate(model=model, x, x)
plot(z)
RFoptions(seed=NA)
z@data
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z)
?RMwhittle
x <- seq(0, 20, len=250)
model <- RMwhittle(nu=1, var = 1, scale = 5)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z)
plot(z, main = paste("scale = ", scl))
scl <- 5
plot(z, main = paste("scale = ", scl))
RFoptions(seed=NA)
scl <- 20
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
scl <- 15
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
graphics::image(as.matrix(z))
raster::plot(raster::raster(z))
scl <- 2
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
scl <- 1
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
scl <- 1
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
scl <- 1
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
scl <- 10
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
scl <- 10
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
x <- seq(0, 20, len=250)
scl <- 2
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
x <- seq(0, 20, len=250)
scl <- 2
model <- RMwhittle(nu=1, var = 1, scale = scl)
z <- RFsimulate(model=model, x, x)
z <- sp::SpatialGridDataFrame(z@grid, z@data)
plot(z, main = paste("scale = ", scl))
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(cache = TRUE)
# Spatstat datasets
library(spatstat)
data(cells)
# Simulate from random fields
library(RandomFields)
# Plotting
library(ggplot2)
# Gorillas Gorillas Gorillas
library(inlabru)
set.seed(1234)
data(gorillas)
init.tutorial()
nests = gorillas$nests
mesh = gorillas$mesh
boundary = gorillas$boundary
gcov = gorillas$gcov
ggplot() +
gg(mesh) +
gg(boundary) +
gg(nests)
ggplot() +
gg(gcov$vegetation) +
gg(boundary) +
gg(nests, color = "white", cex = 0.5) +
coord_equal()
ggplot() +
gg(gcov$vegetation) +
gg(boundary) +
gg(nests, color = "white", cex = 0.5) +
coord_equal()
#' Set things up
#+results="hide",warning=FALSE,message=FALSE
library(inlabru)
library(RColorBrewer)
#+results="hide",warning=FALSE,message=FALSE
init.tutorial()
data(gorillas, package = "inlabru")
nests = gorillas$nests
mesh = gorillas$mesh
boundary = gorillas$boundary
gcov = gorillas$gcov
#' ### Vegetation type
#' Look at the vegetation type, nests and boundary:
#'
#+warning=FALSE,message=FALSE
ggplot() +
gg(gcov$vegetation) +
gg(boundary) +
gg(nests, color = "white", cex = 0.5) +
coord_equal()
#' Or, with the mesh:
#'
#+warning=FALSE,message=FALSE
ggplot() +
gg(gcov$vegetation) +
gg(mesh) +
gg(boundary) +
gg(nests, color = "white", cex = 0.5) +
coord_equal()
#' #### A model with vegetation type only
#'
#' It seems that vegetation type might be a good predictor because nearly all the nests fall in
#' vegetation type `Primary`. So we construct a model with vegetation type as a fixed effect.
#' To do this, we need to tell 'lgcp' how to find the vegetation type at any point in
#' space, and we do this by creating a fixed effect that we call `veg` (we could call it
#' anything), as follows:
#'
#+warning=FALSE,message=FALSE
cmp1 = coordinates ~ veg(map = gcov$vegetation, model = "factor") - Intercept
#' Notes:
#' * We need to tell 'lgcp' that this is a factor fixed effect, which we do
#' with `model="factor"`.
#' * We do not want an intercept parameter when we use factors. Unlike regression
#' models like 'lm()', 'glm()' or 'gam()', 'lgcp()'
#' does not absorb the first level of factor variables into an intercept. The intercpet
#' is removed with `- Intercept`.)
#'
#' Fit the model as usual:
#'
#+results='hide',warning=FALSE,message=FALSE,eval=TRUE
fit1 = lgcp(cmp1, nests, samplers = boundary, domain = list(coordinates = mesh))
nests = gorillas$nests
mesh = gorillas$mesh
boundary = gorillas$boundary
gcov = gorillas$gcov
ggplot() +
gg(gcov$vegetation) +
gg(boundary) +
gg(nests, color = "white", cex = 0.5) +
coord_equal()
ggplot() +
gg(gcov$vegetation) +
gg(boundary) +
gg(nests, cex = 0.5) +
coord_equal()
ggplot() +
gg(gcov$vegetation) +
gg(boundary) +
gg(nests) +
coord_equal()
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(cache = TRUE)
# Spatstat datasets
library(spatstat)
data(cells)
# Simulate from random fields
library(RandomFields)
# Plotting
library(ggplot2)
# Gorillas Gorillas Gorillas
library(inlabru)
set.seed(1234)
ggplot() +
# gg(gcov$vegetation) +
gg(boundary) +
gg(nests, color = "white", cex = 0.5) +
coord_equal()
class(gcov$vegetation)
test <- fortify(gcov$vegetation)
?gg
# ggplot() +
#   gg(gcov$vegetation) +
#   gg(boundary) +
#   gg(nests, color = "white", cex = 0.5) +
#   coord_equal()
ggplot() +
gg(gcov$elevation)
# ggplot() +
#   gg(gcov$vegetation) +
#   gg(boundary) +
#   gg(nests, color = "white", cex = 0.5) +
#   coord_equal()
ggplot() +
gg(gcov$vegetation)
test <- as.data.frame(gcov$vegetation)
head(test)
coordnames(gcov$vegetation)
library(inlabru)
library(inlabru)
data(gorillas)
init.tutorial()
nests = gorillas$nests
mesh = gorillas$mesh
boundary = gorillas$boundary
gcov = gorillas$gcov
library(inlabru)
data(gorillas)
init.tutorial()
nests = gorillas$nests
mesh = gorillas$mesh
boundary = gorillas$boundary
gcov = gorillas$gcov
veg <- gcov$vegetation
veg <- as.data.frame(gcov$vegetation)
ggplot() +
geom_tile(data = veg, mapping = aes_string(x = "x", y = "y", fill = "vegetation"))
veg <- as.data.frame(gcov$vegetation)
head(veg)
data(gorillas)
init.tutorial()
nests = gorillas$nests
mesh = gorillas$mesh
boundary = gorillas$boundary
gcov = gorillas$gcov
library(inlabru)
data(gorillas)
init.tutorial()
nests = gorillas$nests
mesh = gorillas$mesh
boundary = gorillas$boundary
gcov = gorillas$gcov
veg <- as.data.frame(gcov$vegetation)
head(veg)
ggplot() +
geom_tile(data = veg, mapping = aes_string(x = "x", y = "y", fill = "vegetation"))
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(cache = TRUE)
# Spatstat datasets
library(spatstat)
data(cells)
# Simulate from random fields
library(RandomFields)
# Plotting
library(ggplot2)
# Gorillas Gorillas Gorillas
library(inlabru)
set.seed(1234)
veg <- as.data.frame(gcov$vegetation)
ggplot() +
geom_tile(data = veg, mapping = aes_string(x = "x", y = "y", fill = "vegetation")) +
gg(mesh) +
gg(boundary) +
gg(nests, colour = "white") +
coord_equal()
veg <- as.data.frame(gcov$vegetation)
ggplot() +
geom_tile(data = veg, mapping = aes_string(x = "x", y = "y", fill = "vegetation")) +
gg(mesh) +
gg(boundary) +
gg(nests, colour = "white", cex = 0.5) +
coord_equal()
veg <- as.data.frame(gcov$vegetation)
ggplot() +
geom_tile(data = veg, mapping = aes_string(x = "x", y = "y", fill = "vegetation")) +
gg(boundary) +
gg(nests, colour = "white", cex = 0.5) +
coord_equal()
?moon_reader
